using NUnit.Framework;
using SROMLab3;

namespace SmthTest
{
    class TestFunc
    {
        [TestFixture]
        public class TestCalculation
        {
            [Test]
            [TestCase("01111001011011110110111101001001010011101011011010111010100101001000010111100011111110000011110011100101101111000110010011100010001010111011110011101011101110011101001100010110001000110011101101100110100011111001010111001010101101010000010000001111000111010101011001001100010000001100110101110110110101000110000010001100111111010110110010111010100111111011011",
                "01010111111011110100001001110100100010010000001111100110001011010000101011111101000011011000101111100010110011101110111011100110010111000010011001101000001011011001010011011000110101001011111010011011010001011000110001010000011111001011101010110011000011011101001011010100100111000000001100110111000011000000010000000010101011101010100100010101000010011001010",
                "00101110100000000010110100111101110001111011010101011100101110011000111100011110111101011011011100000111011100101000101000000100011101111001101010000011100101000100011111001110111101111000010111111101110010100001100110011010110010011011111010111100000100001000010010011000110111001100111001000001110110000110010010001110010100111100010110101111100101100010001")]

            [TestCase("11100000101100001011110110111011101111110101000110110001111001001001010110100101110010100010110111010110101101010010111111100111010110011001011101001111100110011000100101110011110000010110110000011111101110000101111010011001001101000111010100000101010111001010001110110001000010110101101011011101111000111100101101010011011111110100110010000100000101100000001",
                "01000001010101001001111110111000001001110011100001011000111101011101101000001100110001000101101101101000101001100100111100111001000110100100101100000111000110101001111111100001000101000100011100100110111110000010001011001101111011001111110100110111001111010001100000101110001000110101001001001101100010010000010001010111001111100110001101100001100100110100011",
                "10100001111001000010001000000011100110000110100111101001000100010100111110101001000011100111011010111110000100110110000011011110010000111101110001001000100000110001011010010010110101010010101100111001010000000111110001010100110110001000100000110010011000011011101110011111001010000000100010010000011010101100111100000100010000010010111111100101100001010100010")]
              //"00100001111001000010001000000011100110000110100111101001000100010100111110101001000011100111011010111110000100110110000011011110010000111101110001001000100000110001011010010010110101010010101100111001010000000111110001010100110110001000100000110010011000011011101110011111001010000000100010010000011010101100111100000100010000010010111111100101100001010100010
            [TestCase("00111000111100111100110110101111001001110111000100110110101101111100111000111000110011100010011011101000000011011110101011011000111000111001001000111101000110000011100000000001010011011000011010100000011111101110011000111101011111111101101100000000100100111010011011000011101110001101111111000110111111110001101001110010000101010011111001110110011111011000110",
                "10011010111101011111001101111000010110100011001111010001001001011010011111000101011010101011110111010011000000110000111000011001101100111011000110101101110011110001100100010111001100110100000000011111000000100100010001011010000111010000011010100010100000101010101101011110011001111010011000010101000111001011000000010011001010110100110100111001111111111110000",
                "10100010000001100011111011010111011111010100001011100111100100100110100111111101101001001001101100111011000011101110010011000001010100000010001110010000110101110010000100010110011111101100011010111111011111001010001001100111011000101101110110100010000100010000110110011101110111110111100111010011111000111010101001100001001111100111001101001111100000100110110")]

            [TestCase("10110", "10011", "00101")]

            [TestCase("00101001101111011101010110001001010110011111101101010100010110010100010010100100000111100111110011000101010011000000101001000000001010101110111100111100010001110100100100110001011110101110110010101001000001100101100100011011010100010101100000111110100101010001110010000010101100101010011101001101111000001011010011000001111010010110010100001111000010101000110",
        "00101011001111000010011110110010111000000011110010010011110000011011000001100001100011100101000101100111101001010010111111000101110100011001110001011001100010111000000100001001001000100100010010010101001110110100010100010110001110011101110010000111010111111000110110100100000101010100111100111001100100111100001000011010110010111000011101010111101011000111000",
        "00000010100000011111001000111011101110011100011111000111100110001111010011000101100100000010110110100010111010010010010110000101111110110111001101100101110011001100100000111000010110001010100000111100001111010001110000001101011010001000010010111001110010101001000100100110101001111110100001110100011100110111011011011011001000101110001001011000101001101111110")]


            public void AddTest(string numb1, string numb2, string expectedResult)
            {
               
                ulong[]  a = Calculate.BitSting_ToByte(numb1);
                ulong[]  b = Calculate.BitSting_ToByte(numb2);

                var actualResult = Calculate.Bite_to_String(Calculate.Add(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }

         
        }
    }
}
